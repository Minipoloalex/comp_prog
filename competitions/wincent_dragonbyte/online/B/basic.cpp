#include <bits/stdc++.h>
using namespace std;

vector<vector<string>> digits = {
    {
        ".............................",
        ".............................",
        ".............................",
        ".............................",
        ".............................",
        ".######.######.######.######.",
        "....##..#....#.#....#.#....#.",
        "...##...######.#......#....#.",
        "..##....#......#......#....#.",
        ".######.######.#......######.",
        ".............................",
        ".............................",
        ".............................",
        ".............................",
        "............................."
    }, 
    {
    "......................",
    "......................",
    "......................",
    "......................",
    "......................",
    ".######.######.######.",
    ".#....#.#....#.#....#.",
    ".#....#.#....#.######.",
    ".#....#.#....#.#......",
    ".######.#....#.######.",
    "......................",
    "......................",
    "......................",
    "......................",
    "......................"},
    {"............................",
"....#.......................",
"....#.......................",
".#######....................",
"....#.......................",
"....#....#....#....#.######.",
"....#....#....#....#.#....#.",
"....#....##..###..##.#....#.",
"....#.....####.####..#....#.",
"....#......##...##...######.",
"............................",
"............................",
"............................",
"............................",
"............................",},
{".....................................",
"....#....#...........................",
"....#....#...........................",
".#######.#...........................",
"....#....#...........................",
"....#....######.######.######.######.",
"....#....#....#.#....#.#....#.#....#.",
"....#....#....#.#......######.######.",
"....#....#....#.#......#......#......",
"....#....#....#.#......######.######.",
".....................................",
".....................................",
".....................................",
".....................................",
".....................................",},
{"............................",
".#####......................",
".#...#......................",
".#...#......................",
".#..........................",
".###...######.#....#.######.",
".#.....#....#.#....#.#....#.",
".#.....#....#.#....#.#......",
".#.....#....#.#....#.#......",
".#.....######.######.#......",
"............................",
"............................",
"............................",
"............................",
"............................",},
{".......................",
".#####.................",
".#...#.................",
".#...#.#...............",
".#.....................",
".###...#.#....#.######.",
".#.....#.#....#.#....#.",
".#.....#.##..##.######.",
".#.....#..####..#......",
".#.....#...##...######.",
".......................",
".......................",
".......................",
".......................",
".......................",},
{".................",
".................",
".................",
"........#........",
".................",
".######.#.#....#.",
".#......#.##..##.",
".######.#..####..",
"......#.#.##..##.",
".######.#.#....#.",
".................",
".................",
".................",
".................",
".................",},
{"....................................",
"....................................",
"....................................",
"....................................",
"....................................",
".######.######.#....#.######.######.",
".#......#....#.#....#.#....#.#....#.",
".######.######.##..##.######.#....#.",
"......#.#.......####..#......#....#.",
".######.######...##...######.#....#.",
"....................................",
"....................................",
"....................................",
"....................................",
"....................................",},
{"................................",
".................#.........#....",
".................#.........#....",
"........#........#......#######.",
".................#.........#....",
".######.#.######.######....#....",
".#....#.#.#....#.#....#....#....",
".######.#.#....#.#....#....#....",
".#......#.#....#.#....#....#....",
".######.#.######.#....#....#....",
"...............#................",
"...............#................",
"..........#....#................",
"..........######................",
"................................",},
{"........................",
"........................",
"........................",
"........#...............",
"........................",
".######.#.######.######.",
".#....#.#.#....#.#....#.",
".#....#.#.#....#.######.",
".#....#.#.#....#.#......",
".#....#.#.#....#.######.",
"........................",
"........................",
"........................",
"........................",
"........................",}};

vector<vector<string>> flipped;

vector<string> rotate90(const vector<string> &s) {
    int rows = int(s.size());
    int cols = int(s[0].size());
    vector<string> ans(cols, string(rows, '.'));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int col = rows - 1 - i;
            int row = j;
            ans[row][col] = s[i][j];
        }
    }
    return ans;
}

vector<vector<vector<string>>> possible;
void solve() {
    int r, c;
    cin >> r >> c;
    vector<string> cur_digit(r, string(c, '.'));
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            cin >> cur_digit[i][j];
        }
    }
    bool found = false;
    int sol = -1;
    for (int i = 0; i < 10; i++) {
        auto &cand = possible[i];
        if (found) break;
        for (vector<string> &digit: cand) {
            if (digit == cur_digit) {
                found = true;
                sol = i;
                break;
            }
        }
    }
    cout << sol << '\n';
}

int main() {
    cin.tie(0)->ios::sync_with_stdio(0);
    possible.resize(10);
    flipped.resize(10);
    for (int i = 0; i < 10; i++) {
        flipped[i] = digits[i];
        for (auto &s: flipped[i]) {
            reverse(s.begin(), s.end());
        }
        vector<string> cur = digits[i], cur_flipped = flipped[i];
        for (int j = 0; j < 4; j++) {
            possible[i].push_back(cur);
            possible[i].push_back(cur_flipped);
            cur = rotate90(cur);
            cur_flipped = rotate90(cur_flipped);
        }
    }
    int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
